@page "/dialogcardAdmin"

@inject IGymInstructorService gymInstructorService
@inject IClassService classService
@inject IAuthService AuthService
@inject Radzen.DialogService dialogService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Instructor")]

<style>
    table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    thead {
        background-color: rgb(3, 17, 41 );
        color: white;
    }

    th {
        background-color: #f2f2f2;
    }

    table tbody tr:hover {
        background-color: rgb(106, 160, 248,0.2 );
    }

    tbody {
        font-size: 18px;
        font-weight: bold;
    }


    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .no-background-card {
        background-color: transparent;
        border: none;
    }

        .no-background-card .card {
            color: #000; /* Asegúrate de que el texto sea visible */
        }

</style>
<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="m-3">
    <RadzenStack Gap="1rem" Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;">
        <RadzenStack>
            <RadzenRow >
                <RadzenColumn Size="12" SizeMD="6" Class="rz-p-4 rz-border-radius-1 bg-white" Style="border: var(--rz-grid-cell-border)">
                    <RadzenText  TextStyle="TextStyle.Subtitle1">Contacto</RadzenText>
                    <RadzenStack Orientation="Radzen.Orientation.Horizontal" AlignItems="AlignItems.Center">

                        <RadzenStack Gap="0" Class="rz-text-truncate">
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Usuario</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate "><b>@model.FullName</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Email</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate "><b>@model.EmailUser</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="6" Class="rz-p-4 rz-border-radius-1 bg-white" Style="border: var(--rz-grid-cell-border)">
                    <RadzenText  TextStyle="TextStyle.Subtitle1">Informacion del Instructor</RadzenText>
                    <RadzenStack Gap="0" Class="rz-text-truncate">
                        <RadzenText TextStyle="TextStyle.Overline" Class="rz-mt-2 rz-my-0" Style="color: var(--rz-text-tertiary-color);">Rol</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate"><b>Instructor</b></RadzenText>
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>

            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-m-0 text-white">Clases Organizadas:</RadzenText>
            </RadzenStack>
            <div class="card no-background-card">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="text-center ">Tipo de Clase</th>
                                <th class="text-center">Fecha</th>
                                <th class="text-center">Hora</th>
                                <th class="text-center">Capacidad</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (listClassUser is null || listClassUser.Count() == 0)
                            {
                                <tr>
                                    <td colspan="5" class="text-white text-center">
                                        <p class="fw-bold fs-6">No tienes ninguna clase creada</p>

                                    </td>
                                </tr>


                            }
                            else
                            {
                               
                                    @foreach (var classes in listClassUser)
                                    {
                                        <tr>
                                            <td class="text-center text-white">@classes.ClassTypeName</td>
                                            <td class="text-center text-white">@GetDate(classes.Schedule)</td>
                                            <td class="text-center text-white">@classes.Schedule.TimeOfDay - @AddMinutes(classes.Schedule, 60)</td>
                                            <td class="text-center text-white">@classes.TotalReservations/@classes.Capacity</td>


                                        </tr>
                                    }
                                

                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </RadzenStack>
        @* <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            @*             <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Flat" Text="Cerrar" Style="width: 120px" />
            <RadzenButton Click="@Cerrar" Variant="Variant.Flat" Text="Volver" Style="width: 120px" />
        </RadzenStack> *@
    </RadzenStack>

</div>

@code {



    GymInstructorDTO model = new GymInstructorDTO();
    List<ClassDTO> listClassUser = new List<ClassDTO>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        string emailUserIdentificate = await AuthService.GetEmail();

        var result = await gymInstructorService.GymInstructorByEmail(emailUserIdentificate);


        model = result.GymInstructorDTO!;
        listClassUser = await classService.ClassesListByGymInstructor(model.Id);
    }
    // <RadzenImage Path="@order.Employee?.Photo" Style="width: 80px; height: 80px; border-radius: 50%" />

    private void Cerrar()
    {
        NavigationManager.NavigateTo("/");
    }

    private string GetDate(DateTime? date)
    {

        return date?.ToString("dd-MM-yyyy");
    }

    private TimeSpan AddMinutes(DateTime time, int minutes)
    {
        var addHour = time.AddMinutes(minutes);
        return addHour.TimeOfDay;
    }
    
}
