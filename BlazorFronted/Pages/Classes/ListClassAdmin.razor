@inject SweetAlertService Swal
@inject IClassService classService;

@page "/listclassadmin"
@inject IJSRuntime JSRuntime

@attribute [Authorize(Roles = "Instructor")]

<PageTitle>Clases</PageTitle>


<style>

    table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    thead {
        background-color: rgb(3, 17, 41 );
        color: white;
    }

    th {
        background-color: #f2f2f2;
    }

    table tbody tr:hover {
        background-color: rgb(106, 160, 248,0.2 );
    }

    tbody {
        font-size: 18px;
        font-weight: bold;
    }

    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .table-container {
        width: 50%;
        margin: 0 auto; /* Centra el contenedor horizontalmente */
    }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        background-color: transparent;
    }

    .contenedor-volver button {
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        padding: 0;
    }

    .contenedor-volver i {
        font-size: 24px;
    }

    .scrollable-table {
        /* display: block; */
        max-height: 400px; /* Ajusta este valor según tus necesidades */
        overflow-y: auto;
        margin: 0 auto; /* Centrar el contenedor */
    }

        .scrollable-table::-webkit-scrollbar {
            width: 10px; /* Ajusta el ancho del scrollbar */
        }

        .scrollable-table::-webkit-scrollbar-track {
            background: transparent; /* Color de fondo del track */
        }

        .scrollable-table::-webkit-scrollbar-thumb {
            background: #888; /* Color de la barra */
            border-radius: 5px; /* Bordes redondeados de la barra */
        }

            .scrollable-table::-webkit-scrollbar-thumb:hover {
                background: #555; /* Color de la barra al pasar el cursor por encima */
            }

</style>

<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="m-3 content">
    <h3 class="text-white">Clases Disponibles</h3>

    <a class="btn btn-success btn-sm mb-3" href="createdclasses">Nueva Clase</a>
    @if (!showParticipants)
    {
        <div class="d-flex justify-content-between mb-3">
            <button class="btn btn-primary btn-sm" @onclick="() => ChangeMonth(-1)">Mes Anterior</button>
            <h3 class="text-white ms-3">Registros del mes de @NombreMesActual</h3>

            <button class="btn btn-primary btn-sm" @onclick="() => ChangeMonth(1)">Mes Siguiente</button>
        </div>
        <div class="table-responsive scrollable-table">
            <table class="table">

                <thead>
                    <tr class="text-white">
                        <th class="text-center ">Instructor</th>
                        <th class="text-center">Tipo</th>
                        <th class="text-center">Fecha</th>
                        <th class="text-center">Horario</th>
                        <th class="text-center">Capacidad</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>


                    @if (resultClass.ListClass == null)
                    {
                        @if (resultClass.Error != null)
                        {
                            <tr>
                                <td colspan="6" align="center" class="text-white text-center">
                                    @resultClass.Error
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td colspan="6" align="center" class="text-center">
                                    <img style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                                </td>
                            </tr>
                        }

                    }
                    else
                    {

                        @if (RegistrosFiltradosPorMes.Count == 0 || RegistrosFiltradosPorMes is null)
                        {
                            <tr>
                                <td colspan="6" align="center" class="text-white text-center">
                                    No hay clases disponibles
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var classes in RegistrosFiltradosPorMes)
                            {
                                <tr class="text-white">
                                    <td class="text-center">@classes.GymInstructorName</td>
                                    <td class="text-center">@classes.ClassTypeName</td>
                                    <td class="text-center">@GetDate(classes.Schedule)</td>
                                    <td class="text-center">@classes.Schedule.TimeOfDay.ToString(@"hh\:mm") - @AddMinutes(classes.Schedule, 60)</td>
                                    <td class="text-center">@classes.TotalReservations/@classes.Capacity</td>

                                    <td>
                                        <a class="btn btn-primary btn-sm ms-2 mt-1" href="createdclasses/@classes.Id">
                                            <i class="bi bi-pencil-fill"></i>
                                        </a>
                                        <button type="button" class="btn btn-danger btn-sm ms-2 mt-1" @onclick="(() => DeleteClass(classes.Id))">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>

                                        <button type="button" class="btn btn-info btn-sm ms-2 mt-1" @onclick="(() =>  showParticipantsSection(true,classes))">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }


                    }

                </tbody>



            </table>
        </div>
    }
    else
    {
        <div class="contenedor-volver">
            <button class="bg-light border-0" @onclick="(() => showParticipantsSection(false))">
                <i class="bi bi-arrow-left"></i>
            </button>
        </div>
        <div class="d-flex justify-content-center mb-3">
            <h3 class="text-white ms-3">@classDTO.ClassTypeName - @GetDate(classDTO.Schedule) - @classDTO.Schedule.TimeOfDay.ToString(@"hh\:mm")/@AddMinutes(classDTO.Schedule, 60)</h3>
        </div>
        <div class="table-container">
            <div class="table-responsive">
                <table class="table">

                    <thead>
                        <tr class="text-white">
                            <th class="text-center fw-bolder" style="font-size: 20px">Participantes</th>
                        </tr>
                    </thead>
                    <tbody>

                        @if (listUserByClass == null)
                        {
                            @if (resultClass.Error != null)
                            {
                                <tr>
                                    <td colspan="6" align="center" class="text-white text-center">
                                        @resultClass.Error
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" align="center" class="text-center">
                                        <img style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            @if (listUserByClass.Count == 0 || listUserByClass is null)
                            {
                                <tr>
                                    <td colspan="6" align="center" class="text-white text-center">
                                        No hay usuario disponibles
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var gymMember in listUserByClass)
                                {
                                    <tr class="text-white">
                                        <td class="text-center">@gymMember.FullName</td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>




@code {
    ClassListResult resultClass = new ClassListResult();
    IEnumerable<ClassDTO> listClass = null;
    private List<ClassDTO> RegistrosFiltradosPorMes { get; set; } = new List<ClassDTO>();
    private DateTime CurrentMonth { get; set; } = DateTime.Now;
    private string NombreMesActual => CurrentMonth.ToString("MMMM yyyy", new CultureInfo("es-ES"));
    private List<GymMemberDTO> listUserByClass = new List<GymMemberDTO>();
    private ClassDTO classDTO = new ClassDTO();
    private bool showParticipants;
    private string tableClass;


    protected override async Task OnInitializedAsync()
    {
        showParticipants = false;
        resultClass.ListClass = null;
        resultClass = await classService.ClassesList();
        listClass = resultClass.ListClass!;
        FiltrarRegistrosPorMes(CurrentMonth);
        // tableClass = RegistrosFiltradosPorMes.Count > 10 ? "scrollable-table" : ""; Ajusta el número de registros según sea necesario

    }

    private void FiltrarRegistrosPorMes(DateTime mes)
    {
        if (listClass is null || listClass.Count() == 0)
        {
            RegistrosFiltradosPorMes = new List<ClassDTO>();
        }
        else
        {
            RegistrosFiltradosPorMes = listClass.Where(r => r.Schedule.Month == mes.Month && r.Schedule.Year == mes.Year).OrderBy(x => x.Schedule).ToList();
        }

    }

    private void ChangeMonth(int incremento)
    {
        CurrentMonth = CurrentMonth.AddMonths(incremento);
        FiltrarRegistrosPorMes(CurrentMonth);
    }

    private async Task DeleteClass(int id)
    {
        var confirmDeleteClass = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Clase",
                Text = "Deseas eliminar la clase?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });

        if (confirmDeleteClass.IsConfirmed)
        {
            var eliminado = await classService.DeleteClass(id);
            if (eliminado)
            {
                var isDelete = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Clase Eliminada",
                        Text = $"Se ha eliminado correctamente la clase con id: {id}",
                        Icon = SweetAlertIcon.Success,
                    });

                resultClass = await classService.ClassesList();
                listClass = resultClass.ListClass!;
                await JSRuntime.InvokeVoidAsync("window.location.reload");

            }
            else
            {
                var error = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error al eliminar la clase",
                        Icon = SweetAlertIcon.Error,
                    });
            }
        }
    }

    private string AddMinutes(DateTime time, int minutes)
    {
        var addHour = time.AddMinutes(minutes);
        return addHour.TimeOfDay.ToString(@"hh\:mm");
    }

    private string GetDate(DateTime date)
    {

        return date.ToString("dd/MM/yyyy");
    }

    private async Task showParticipantsSection(bool value, ClassDTO model = null)
    {
        showParticipants = value;
        if(model != null)
        {
            classDTO = model;
            listUserByClass = await classService.GetGymMembersByClass(model.Id);
        }
        


    }
}
