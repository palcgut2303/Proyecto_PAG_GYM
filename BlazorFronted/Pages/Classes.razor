@page "/clases"
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

@using GYM_DTOs;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorFronted.Services;
@using GYM_DTOs.EntityDTO
@inject SweetAlertService Swal
@inject IClassService classService;

<PageTitle>Clases</PageTitle>


<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f5f5f5;
    }

    .contenido-clases {
        margin-top: 2%
    }
</style>

<div class="container mb-5 contenido-clases border border-primary rounded table-responsive">
    <div>
        <h3 class="align-items-center">Clases</h3>
    </div>

    <EditForm Model="classDTO">
        <DataAnnotationsValidator />
        <div class="mt-3">
            <input type="date" class="form-control" @onchange="mostrarDia" value="@fecha" />
            <ValidationMessage For="@(() => classDTO.Schedule)"></ValidationMessage>
            @*             <button class="btn btn-primary mt-3 mb-3" @onclick="mostrarDia" >Obtener Clases</button>
            *@
        </div>


        <table class="table ">
            <thead>
                <tr>
                    <th>
                        Instructor
                    </th>
                    <th>
                        Tipo
                    </th>
                    <th>
                        Horario
                    </th>
                    <th>
                        Capacidad
                    </th>
                    <th>

                    </th>
                </tr>
            </thead>
            <tbody>
                @if (clasesPorDia is not null)
                {
                    @if (clasesEnEseDia is not null)
                    {
                        @foreach (var clase in clasesEnEseDia)
                        {
                            if (clase.Schedule.Date == dateTime)
                            {
                                <tr>
                                    <td>@clase.GymInstructorName</td>
                                    <td>@clase.ClassTypeName</td>
                                    <td>@clase.Schedule.Date - @clase.Schedule.TimeOfDay/@clase.Schedule.AddMinutes(60)</td>
                                    <td>@clase.TotalReservations/@clase.Capacity</td>


                                    @if (ClaseEstaReservadaPorUsuario(clase))
                                    {
                                        <td>
                                            <button class="btn btn-danger" @onclick="(() => CancelarReserva(clase))">Cancelar Reserva</button>
                                        </td>
                                    }
                                    else
                                    {
                                        @if (clase.TotalReservations == clase.Capacity)
                                        {
                                            <td>
                                                <button class="btn btn-secondary">Clase llena</button>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                <button class="btn btn-primary" @onclick="(() => HacerReserva(clase))">Hacer Reserva</button>
                                            </td>
                                        }

                                    }


                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center">No hay clases disponibles</td>
                                </tr>
                            }


                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" align="center">
                                <img style="width:50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" align="center">
                            <img style="width:50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                        </td>
                    </tr>
                }
            </tbody>

        </table>

    </EditForm>




</div>





@code {

    Dictionary<DateTime, List<ClassDTO>> clasesPorDia;
    List<DateTime>? diasMostrados;
    DateTime diaActual = DateTime.Now.Date;
    List<ClassDTO> clasesEnEseDia = new List<ClassDTO>();
    ClassDTO classDTO = new ClassDTO();
    string email = null;
    bool reservada = false;
    List<ClassDTO> listClassByUser = null;
    List<GymMemberDTO> listUserByClass = null;

    protected override async Task OnInitializedAsync()
    {
        clasesPorDia = await classService.GetClassesByDayOfTheWeek();
        diasMostrados = clasesPorDia.Keys.ToList();
        classDTO.Schedule = DateTime.Now.Date;
        dateTime = DateTime.Now.Date;
        email = await AuthService.GetEmail();
        foreach (var item in clasesPorDia)
        {
            if (item.Key.Date == classDTO.Schedule.Date)
            {
                clasesEnEseDia = item.Value;
            }
        }

        listClassByUser = await classService.GetClassesByGymMember(email);
    }

    private bool ClaseEstaReservadaPorUsuario(ClassDTO clase)
    {
        if (listClassByUser == null || listClassByUser.Count == 0)
        {
            return false;
        }

        foreach (var item in listClassByUser)
        {
            if (item.Id == clase.Id)
            {

                return true;
            }
        }



        return false;
    }

    private async Task HacerReserva(ClassDTO model)
    {
        if (model.TotalReservations < model.Capacity)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Reserva",
                    Text = "¿Deseas Reservar esta clase?",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });

            if (resultado.IsConfirmed)
            {
                var result = await classService.ReserveClass(model.Id, email);

                if (result.EsCorrecto)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Reserva",
                            Text = "Reserva realizada con exito",
                            Icon = SweetAlertIcon.Success
                        });


                    // model.TotalReservations++;
                    // StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("window.location.reload");

                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Reserva",
                            Text = "No se pudo realizar la reserva",
                            Icon = SweetAlertIcon.Error
                        });

                    reservada = false;
                    // await JSRuntime.InvokeVoidAsync("window.location.reload");

                }
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Reserva",
                    Text = "No hay cupo disponible",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }



    }

    private async Task CancelarReserva(ClassDTO model)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Reserva",
                Text = "¿Deseas Cancelar la reserva de esta clase?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (resultado.IsConfirmed)
        {
            var result = await classService.CancelReservation(model.Id, email);

            if (result.EsCorrecto)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Reserva",
                        Text = "Reserva cancelada con exito",
                        Icon = SweetAlertIcon.Success
                    });

                // model.TotalReservations--;
                // StateHasChanged();
                await JSRuntime.InvokeVoidAsync("window.location.reload");

            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Reserva",
                        Text = "No se pudo cancelar la reserva",
                        Icon = SweetAlertIcon.Error
                    });
                reservada = false;
                await JSRuntime.InvokeVoidAsync("window.location.reload");

            }
        }
    }
    string fecha = null;
    DateTime dateTime = new DateTime();

    private void mostrarDia(ChangeEventArgs e)
    {
        fecha = e.Value.ToString();
        dateTime = DateTime.Parse(fecha);

        foreach (var item in clasesPorDia)
        {
            if (item.Key.Date == dateTime)
            {
                clasesEnEseDia = item.Value;
            }
        }
    }



}
