@inject IUserService userService;
@inject SweetAlertService Swal
@inject IAuthService AuthService
@inject IGymMemberService gymMemberService
@inject NavigationManager NavigationManager

@inject DialogService DialogService

@page "/useradminmanage"
@using CurrieTechnologies.Razor.SweetAlert2
@using GYM_DTOs.AccountDTO
@attribute [Authorize(Roles = "Instructor")]

<style>
    .imgCard {
        width: 20%;
    }

    .card {
        border: 1px solid rgba(0, 0, 0, .125);
        border-radius: .25rem;
    }

    .row-user {
        display: -ms-flexbox;
        display: flex;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    }

    .row-user {
        --bs-gutter-x: 1.5rem;
        --bs-gutter-y: 0;
        display: flex;
        flex-wrap: wrap;
        margin-top: calc(var(--bs-gutter-y)* -1);
        
    }

    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

</style>
<div class="page-background-class"></div>
<div class="overlay"></div>
<div class="m-3">
    <h2 class="text-white">Usuarios del sistema</h2>

    <h4 class="mt-5 text-white">Administradores</h4>

    <div class="row-user row-cols-1 row-cols-md-2 row-cols-lg-3">
        @if (listAdmin is null)
        {
            <img class="align-items-center" style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
        }
        else
        {
            @foreach (var user in listAdmin)
            {
                <div class="col mb-4">
                    <div class="card h-100">
                        <img src="img/CardUserImg.png" class="card-img-top mx-auto imgCard" alt="Imagen de usuario">
                        <div class="card-body text-center">
                            <h5 class="card-title">@user.Username</h5>
                            <p class="card-text">Correo electrónico: @user.Email</p>
                            <p class="card-text">Rol: @user.Rol</p>
                            @* @if (email == user.Email)
                            {
                                <button href="#" class="btn btn-primary">Editar</button>
                            } *@
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <h4 class="mt-5 text-white">Usuarios</h4>

    <div class="row-user row-cols-1 row-cols-md-2 row-cols-lg-3">
        @if (listUser is null)
        {
            <img style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />

        }
        else
        {

            @foreach (var user in listUser)
            {
                <div class="col mb-4">
                    <div class="card h-100">
                        <img src="img/CardUserImg.png" class="card-img-top mx-auto imgCard" alt="Imagen de usuario">
                        <div class="card-body text-center">
                            <h5 class="card-title">@user.Username</h5>
                            <p class="card-text">Correo electrónico: @user.Email</p>
                            <p class="card-text">Rol: @user.Rol</p>


                            <RadzenButton class="m-2" Text=@($"Detalles") ButtonStyle="ButtonStyle.Secondary" Click="(() => OpenOrder(user.Email))" />


                            <RadzenButton class="m-2" Text=@($"Hacer Instructor") ButtonStyle="ButtonStyle.Success" Click="(() => HacerAdmin(user.Id))" />
                            @if (user.isEnable)
                            {

                                <RadzenButton class="m-2" Text=@($"Dar de baja") ButtonStyle="ButtonStyle.Danger" Click="(() => InactiveUser(user.Id))" />
                            }
                            else
                            {
                                <RadzenButton class="m-2" Text=@($"Dar de alta") ButtonStyle="ButtonStyle.Danger" Click="(() => EnableUser(user.Id))" />
                            }
                        </div>
                    </div>
                </div>
                
            }
        }
    </div>
</div>

@code {

    UserListResult resultUser = null;
    List<UserDTO> listAdmin = null;
    List<UserDTO> listUser = null;
    string email = null;
    string text = "oscar@gmail.com";
    protected override async Task OnInitializedAsync()
    {
        email = await AuthService.GetEmail();

        resultUser = await userService.UserList();
        listAdmin = resultUser.ListUser.Where(x => x.Rol == "Instructor").ToList();
        listUser = resultUser.ListUser.Where(x => x.Rol == "User").ToList();

    }

    public async Task OpenOrder(string email)
    {
        var result = await gymMemberService.GymMemberByEmail(email);

        var gymMember = result.GymMemberDTO;

        var userID = gymMember!.Id;

        // await DialogService.OpenAsync<DialogCardPage>($"User {userID}",
        //       new Dictionary<string, object>() { { "UserID", userID } },
        //       new DialogOptions() { Width = "700px", Height = "512px", Resizable = true, Draggable = true });

        NavigationManager.NavigateTo($"/dialogcard/{userID}");

    }

    private async Task HacerAdmin(string id)
    {
        string idUser = id;

        var result = await userService.MakeAdmin(idUser);

        if (result.EsCorrecto)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Correcto",
                    Text = "Se ha cambiado correctamente el rol a Instructor",
                    Icon = SweetAlertIcon.Success
                });
            resultUser = await userService.UserList();
            listAdmin = resultUser.ListUser.Where(x => x.Rol == "Instructor").ToList();
            listUser = resultUser.ListUser.Where(x => x.Rol == "User").ToList();
        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = result.Mensaje,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task InactiveUser(string id)
    {
        var result = await userService.InactiveUser(id);

        if (result.EsCorrecto)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Correcto",
                    Text = "Se ha dado de baja correctamente el usuario",
                    Icon = SweetAlertIcon.Success
                });
            resultUser = await userService.UserList();
            listAdmin = resultUser.ListUser.Where(x => x.Rol == "Instructor").ToList();
            listUser = resultUser.ListUser.Where(x => x.Rol == "User").ToList();
        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = result.Mensaje,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task EnableUser(string id)
    {
        var result = await userService.EnableUser(id);

        if (result.EsCorrecto)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Correcto",
                    Text = "Se ha dado de alta correctamente el usuario",
                    Icon = SweetAlertIcon.Success
                });
            resultUser = await userService.UserList();
            listAdmin = resultUser.ListUser.Where(x => x.Rol == "Instructor").ToList();
            listUser = resultUser.ListUser.Where(x => x.Rol == "User").ToList();
        }
        else
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = result.Mensaje,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

}
