@attribute [Authorize(Roles = "Instructor")]

@inject SweetAlertService Swal
@inject IClassTypeService classTypeService;

@page "/typeofclasspage"

<style>


    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    thead {
        background-color: rgb(3, 17, 41 );
        color: white;
    }

    th {
        background-color: #f2f2f2;
    }

    table tbody tr:hover {
        background-color: rgb(106, 160, 248,0.2 );
    }

    tbody {
        font-size: 18px;
        font-weight: bold;
    }
</style>
<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="m-3"
    <h3 class="text-white">Tipos de clases</h3>

    <a class="btn btn-success btn-sm mb-3" href="classtypeconf">Crear Tipo de Clase</a>
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr class="text-white">
                    <th class="text-center ">Nombre</th>
                    <th class="text-center">Descripcion</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (resultClassType.ListClass == null)
                {
                    @if (resultClassType.Error != null)
                    {
                        <tr>
                            <td colspan="5" align="center" class="text-white text-center">
                                @resultClassType.Error
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" align="center" class="text-center">
                                <img style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                            </td>
                        </tr>
                    }

                }
                else
                {
                    @foreach (var classType in listClassType)
                    {
                        <tr class="text-white">
                            <td class="text-center">@classType.Name</td>
                            <td class="text-center">@classType.Description</td>
                            <td>
                                        <a class="btn btn-primary btn-sm ms-2 mt-1" href="classtypeconf/@classType.Id">
                                    <i class="bi bi-pencil-fill"></i>
                                </a>
                                <button type="button" class="btn btn-danger btn-sm ms-2 mt-1" @onclick="(() => DeleteClass(classType.Id))">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }

            </tbody>

        </table>
    </div>
</div>


@code {
    ClassTypeListResult resultClassType = new ClassTypeListResult();

    IEnumerable<ClassTypeDTO> listClassType = null;

    protected override async Task OnInitializedAsync()
    {
        resultClassType = await classTypeService.ClassTypeList();
        listClassType = resultClassType.ListClass!;
    }

    private async Task DeleteClass(int id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Clase",
                Text = "Deseas eliminar la clase?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });

        if (resultado.IsConfirmed)
        {
            var delete = await classTypeService.Delete(id);
            if (delete)
            {
                var isDelete = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Tipo de Clase Eliminada",
                        Text = $"Se ha eliminado correctamente el tipo de clase con id: {id}",
                        Icon = SweetAlertIcon.Success,
                    });

                resultClassType = await classTypeService.ClassTypeList();
                listClassType = resultClassType.ListClass!;
            }
            else
            {
                var error = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error al eliminar el tipo de clase",
                        Icon = SweetAlertIcon.Error,
                    });
            }
        }
    }
}
