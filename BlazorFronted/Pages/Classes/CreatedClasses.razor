@inject IJSRuntime JSRuntime
@inject IClassTypeService classTypeService;
@inject IClassService classService;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

@page "/createdclasses"
@* @page "/createdclasses/{idClass:int}"*@

@attribute [Authorize(Roles = "Instructor")]



<style>


    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

</style>

<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="container container-createdClass">

    <h2 class="text-white mt-2">@title</h2>

    <EditForm Model="@classes" OnValidSubmit="SubmitForm" class="mb-3">
        <DataAnnotationsValidator />
        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <div class="mb-3">
            <label for="capacity" class="form-label text-white fw-bolder">Capacidad de la clase:</label>
            <InputNumber class="form-control " id="capacity" @bind-Value="@classes.Capacity" />
            <ValidationMessage For="@(() => classes.Capacity)" />
        </div>

        <div class="mb-3">
            <label for="schedule" class="form-label text-white fw-bolder">Horario:</label>
            <RadzenDatePicker @bind-Value=@classes.Schedule ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />


        </div>

        <div class="mb-3">
            <label for="ClassTypeName" class="form-label text-white fw-bolder">Tipo de clase:</label>
            <select @bind="@selectedClassType" id="ClassTypeName" class="form-control">
                @if (listClassType != null)
                {
                    <option value="">Selecciona un tipo de clase</option>
                    @foreach (var typeName in listClassType)
                    {
                        <option value="@typeName.Name">@typeName.Name</option>
                    }
                }
                else
                {
                    <option value="">No hay tipos de clases para seleccionar</option>
                }

            </select>
            <ValidationMessage For="@(() => classes.ClassTypeName)"></ValidationMessage>
        </div>


        <button type="submit" class="btn btn-primary">@btnText</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int idClass { get; set; } = 0;

    string title = String.Empty;
    string btnText = string.Empty;
    private CreateClassRequestDTO classes = new CreateClassRequestDTO();

    ClassTypeListResult classTypeResult = new ClassTypeListResult();
    IEnumerable<ClassTypeDTO>? listClassType;
    private bool ShowErrors;
    private string Error = "";
    private string selectedClassType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        classes.Schedule = DateTime.Now;
        classTypeResult = await classTypeService.ClassTypeList();
        listClassType = classTypeResult.ListClass;
        
        title = "Crear Clase";
        btnText = "Crear Clase";

    }


    private async void SubmitForm()
    {

        ShowErrors = false;

        var email = await AuthService.GetEmail();

        classes.emailInstructor = email;
        classes.ClassTypeName = selectedClassType;
        
        var checkedClass = await CheckClassDate(classes);

        if (!checkedClass.Correct)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = checkedClass.Menssage,
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = true,
                });
        }
        else
        {
            var result = await classService.CreateClass(classes);

            if (result.Successful)
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirmacion",
                        Text = "Se ha creado correctamente la clase",
                        Icon = SweetAlertIcon.Success,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Ok",
                    });

                NavigationManager.NavigateTo("/listclassadmin");

                classes = new CreateClassRequestDTO();

            }
            else
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = result.Errors.FirstOrDefault(),
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si",
                        CancelButtonText = "No"
                    });

                var confirmado = !string.IsNullOrEmpty(resultado.Value);



                Error = result.Errors.FirstOrDefault();
                ShowErrors = true;
            }
        }
    }

    private async Task<ResponseAPI<string>> CheckClassDate(CreateClassRequestDTO model)
    {
        return await classService.CheckClassAvailability(model);


    }
}
