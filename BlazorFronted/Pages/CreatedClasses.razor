@inject IJSRuntime JSRuntime
@inject IClassTypeService classTypeService;
@inject IClassService classService;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

@page "/createdclasses"
@page "/createdclasses/{idClass:int}"

@using CurrieTechnologies.Razor.SweetAlert2
@using GYM_DTOs.UpdateDTO
@attribute [Authorize(Roles = "Instructor")]



<style>
    /* .container-createdClass {
                margin-top: 5%;
            } */
</style>
<div class="container container-createdClass">

    <h3>@titulo</h3>

    <EditForm Model="@clase" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        @if (ShowErrors)
        {
            <div class="alert alert-danger" role="alert">
                <p>@Error</p>
            </div>
        }

        <div class="mb-3">
            <label for="name" class="form-label">Nombre de la Clase:</label>
            <InputText class="form-control" id="name" @bind-Value="@clase.Name" />
            <ValidationMessage For="@(() => clase.Name)" />
        </div>

        <div class="mb-3">
            <label for="duration" class="form-label">Duracion (minutos):</label>
            <InputNumber class="form-control" id="duration" @bind-Value="@clase.DurationInMinutes" />
            <ValidationMessage For="@(() => clase.DurationInMinutes)" />
        </div>

        <div class="mb-3">
            <label for="capacity" class="form-label">Capacidad de la clase:</label>
            <InputNumber class="form-control" id="capacity" @bind-Value="@clase.Capacity" />
            <ValidationMessage For="@(() => clase.Capacity)" />
        </div>

        <div class="mb-3">
            <label for="schedule" class="form-label">Fecha:</label>
            <RadzenDatePicker  @bind-Value=@clase.Schedule ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />


        </div>

        <div class="mb-3">
            <label for="ClassTypeName" class="form-label">Tipo de clase:</label>
            <select @bind="@selectedClassType" id="ClassTypeName" class="form-control">
                @if (listClassType != null)
                {
                    <option value="">Selecciona un tipo de clase</option>
                    @foreach (var typeName in listClassType)
                    {
                        <option value="@typeName.Name">@typeName.Name</option>
                    }
                }
                else
                {
                    <option value="">No hay tipos de clases para seleccionar</option>
                }

            </select>
            <ValidationMessage For="@(() => clase.ClassTypeName)"></ValidationMessage>
        </div>


        <button type="submit" class="btn btn-primary">@btnTexto</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int idClass { get; set; } = 0;

    string titulo = String.Empty;
    string btnTexto = string.Empty;
    private CreateClassRequestDTO clase = new CreateClassRequestDTO();
    ClassTypeListResult classTypeResult = new ClassTypeListResult();
    IEnumerable<ClassTypeDTO>? listClassType;
    private bool ShowErrors;
    private string Error = "";
    private string selectedClassType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clase.Schedule = DateTime.Now;
        classTypeResult = await classTypeService.ClassTypeList();
        listClassType = classTypeResult.ListClass;

        if (idClass != 0)
        {
            titulo = "Editar Clase";
            btnTexto = "Editar Clase";
            var resutlClass = await classService.findByIdClass(idClass);
            clase = resutlClass;
            selectedClassType = clase.ClassTypeName;
        }
        else
        {
            titulo = "Crear Clase";
            btnTexto = "Crear Clase";
        }

    }


    private async void SubmitForm()
    {


        ShowErrors = false;

        var email = await AuthService.GetEmail();


        clase.emailInstructor = email;
        clase.ClassTypeName = selectedClassType;

        if (btnTexto == "Editar Clase")
        {
            var id = idClass;

            var updateClass = new UpdateClassRequestDTO
                {
                    ClassTypeName = clase.ClassTypeName,
                    DurationInMinutes = clase.DurationInMinutes,
                    Name = clase.Name,
                    Schedule = clase.Schedule,
                    emailInstructor = clase.emailInstructor,
                    Capacity = clase.Capacity
                };

            var result = await classService.UpdateClass(id, updateClass);

            if (!result.EsCorrecto)
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = result.Mensaje,
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si",
                        CancelButtonText = "No"
                    });

                var confirmado = !string.IsNullOrEmpty(resultado.Value);

                Error = result.Mensaje;
                ShowErrors = true;
            }
            else
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirmacion",
                        Text = "Se ha actualizado correctamente la clase, ¿quieres volver al inicio?",
                        Icon = SweetAlertIcon.Success,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si",
                        CancelButtonText = "No"
                    });

                var confirmado = !string.IsNullOrEmpty(resultado.Value);

                if (!confirmado)
                {
                    clase = new CreateClassRequestDTO();
                }
                else
                {
                    NavigationManager.NavigateTo("/listclassadmin");
                }


            }
        }
        else
        {
            var result = await classService.CrearClass(clase);

            if (result.Successful)
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Confirmacion",
                        Text = "Se ha creado correctamente la clase, ¿quieres volver al inicio?",
                        Icon = SweetAlertIcon.Success,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si",
                        CancelButtonText = "No"
                    });

                var confirmado = !string.IsNullOrEmpty(resultado.Value);

                if (!confirmado)
                {
                    clase = new CreateClassRequestDTO();
                }
                else
                {
                    NavigationManager.NavigateTo("/listclassadmin");
                }

                clase = new CreateClassRequestDTO();

            }
            else
            {
                var resultado = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = result.Errors.FirstOrDefault(),
                        Icon = SweetAlertIcon.Error,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Si",
                        CancelButtonText = "No"
                    });

                var confirmado = !string.IsNullOrEmpty(resultado.Value);



                Error = result.Errors.FirstOrDefault();
                ShowErrors = true;
            }
        }


    }
}
