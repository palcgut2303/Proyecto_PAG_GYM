@inject SweetAlertService Swal
@inject IClassService classService;

@page "/listclassadmin"
@using CurrieTechnologies.Razor.SweetAlert2
@attribute [Authorize(Roles = "Instructor")]
<style>
    
     table {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
    }

    th, td {
        padding: 8px;
        text-align: left;
        border-bottom: 1px solid #ddd;
    }

    thead{
        background-color: rgb(3, 17, 41 );
        color: white;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: rgb(106, 160, 248,0.2 );
        font-weight: bold;
        
    }

    tbody {
        font-size: 18px;
    }

        .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroundImage.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

</style>

<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="m-3 content">
    <h3 class="text-white">Clases Disponibles</h3>

    <a class="btn btn-success btn-sm mb-3" href="createdclasses">Nueva Clase</a>
    <div class="table-responsive">
        <table class="table border-3">
            <thead>
                <tr class="text-white">
                    <th class="text-center ">Instructor</th>
                    <th class="text-center">Tipo</th>
                    <th class="text-center">Fecha</th>
                    <th class="text-center">Horario</th>
                    <th class="text-center">Capacidad</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (resultClass.ListClass == null)
                {
                    @if (resultClass.Error != null)
                    {
                        <tr>
                            <td colspan="5" align="center">
                                @resultClass.Error
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" align="center">
                                <img style="width: 50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                            </td>
                        </tr>
                    }

                }
                else
                {
                    @foreach (var classes in listClass)
                    {
                        <tr class="text-white">
                            <td class="text-center">@classes.GymInstructorName</td>
                            <td class="text-center">@classes.ClassTypeName</td>
                            <td class="text-center">@GetDate(classes.Schedule)</td>
                            <td class="text-center">@classes.Schedule.TimeOfDay - @AddMinutes(classes.Schedule, 60)</td>
                            <td class="text-center">@classes.TotalReservations/@classes.Capacity</td>

                            <td>
                                <a class="btn btn-primary btn-sm ms-2" href="createdclasses/@classes.Id">
                                    <i class="bi bi-pencil-fill"></i>
                                </a>
                                <button type="button" class="btn btn-danger btn-sm ms-2" @onclick="(() => Eliminar(classes.Id))">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                }

            </tbody>

        </table>
    </div>
</div>




@code {
    ClassListResult resultClass = new ClassListResult();
    IEnumerable<ClassDTO> listClass = null;
    

    protected override async Task OnInitializedAsync()
    {
        resultClass.ListClass = null;
        resultClass = await classService.ClassesList();
        listClass = resultClass.ListClass!;
    }

    private async Task Eliminar(int id)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Eliminar Clase",
                Text = "Deseas eliminar la clase?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
            });

        if (resultado.IsConfirmed)
        {
            var eliminado = await classService.DeleteClass(id); 
            if (eliminado)
            {
                var isDelete = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Clase Eliminada",
                        Text = $"Se ha eliminado correctamente la clase con id: {id}",
                        Icon = SweetAlertIcon.Success,
                    });

                resultClass = await classService.ClassesList();
                listClass = resultClass.ListClass!;
            }
            else
            {
                var error = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error al eliminar la clase",
                        Icon = SweetAlertIcon.Error,
                    });
            }
        }
    }

    //Metodo que me añada una hora a la hora de la clase
    private TimeSpan AddMinutes(DateTime time, int minutes)
    {
        var addHour = time.AddMinutes(minutes);
        return addHour.TimeOfDay;
    }

    //Metodo que me devuelva la fecha de la clase
    private string GetDate(DateTime date)
    {
        
        return date.ToString("dd-MM-yyyy");
    }

}
