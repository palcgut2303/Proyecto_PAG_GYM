@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

@using BlazorFronted.Interfaces
@using GYM_DTOs;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorFronted.Services;
@using GYM_DTOs.EntityDTO
@inject SweetAlertService Swal
@inject IClassService classService;

@using System.Globalization



<style>

    .calendar-container {
        margin: 20px;
        padding: 20px;
        background-color: #222;
        color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        z-index: 3; /* Asegurar que esté por encima de la superposición */
    }

    .days-buttons {
        display: flex;
        flex-wrap: wrap; /* Permitir que los botones se ajusten en varias líneas */
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .day-button {
        background-color: #333;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        flex: 1 1 100px; /* Ajustar el tamaño de los botones */
        margin: 5px; /* Agregar margen para el espacio entre botones */
    }

        .day-button.active {
            background-color: rgb(3, 17, 41);
        }

    .classes-list {
        display: flex;
        flex-direction: column;
    }

    .class-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #444;
        margin: 5px 0;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .time {
        width: 100px;
    }

    .class-name {
        flex-grow: 1;
        padding-left: 10px;
        border-left: 5px solid rgb(3, 17, 41);
        font-weight: bold;
    }

    .class-button {
        flex-grow: 1;
        display: flex;
        justify-content: flex-end;
    }

</style>



<div class="calendar-container">
    <h2>Clases</h2>
    <div class="text-center text-white fw-bolder">
        <span>@selectedDateTime.ToString("dd MMMM yyyy", cultureInfo)</span>
    </div>
    <div class="days-buttons">
        @foreach (var day in GetOrderedDaysOfWeek())
        {
            <button class="day-button mr-2 fw-bolder @(selectedDay == day ? "active" : "")" @onclick="() => SelectDay(day)">
                @GetDayNameInSpanish(day)
            </button>
        }
    </div>

    <div class="classes-list">
        @foreach (var clase in GetClasesForSelectedDay())
        {
            <div class="class-item">
                <div class="time">
                    @clase.Schedule.ToString("HH:mm") - @AddMinutes(clase.Schedule, 60)
                </div>
                <div class="class-name" style="border-left: 5px solid rgb(3, 17, 41 )">
                    @clase.ClassTypeName
                </div>
                <div class="class-button">
                    <span class="mr-2 p-2">@clase.TotalReservations/@clase.Capacity</span>
                    @if (clase.Schedule < DateTime.Now)
                    {
                        <button class="btn btn-info">
                            <span class="d-none d-sm-inline">Clase Cerrada</span>
                            <span class="d-inline d-sm-none">Cla. Cerr.</span>
                        </button>
                    }
                    else if (ClassIsReservationByUser(clase))
                    {
                        <button class="btn btn-danger" @onclick="(() => CancelReservation(clase))">
                            <span class="d-none d-sm-inline">Cancelar Reserva</span>
                            <span class="d-inline d-sm-none">Canc. Res.</span>
                        </button>
                    }
                    else if (clase.TotalReservations == clase.Capacity)
                    {
                        <button class="btn btn-secondary">
                            <span class="d-none d-sm-inline">Clase Llena</span>
                            <span class="d-inline d-sm-none">Cla. Llena</span>
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" @onclick="(() => HacerReserva(clase))">Reservar</button>

                    }

                </div>

            </div>
        }
    </div>
</div>





@code {


    private ClassListResult resultListClass;
    private IEnumerable<ClassDTO> clases = new List<ClassDTO>();
    private Dictionary<DayOfWeek, List<ClassDTO>> clasesPorDia;
    private DayOfWeek selectedDay = DateTime.Now.DayOfWeek;

    private DateTime selectedDateTime;
    CultureInfo cultureInfo = new CultureInfo("es-ES");

    private bool ShowErrors;
    private IEnumerable<string>? Errors;
    string emailUserIdentificate = string.Empty;


    List<ClassDTO> listClassByUser = null;

    protected override async Task OnInitializedAsync()
    {
        selectedDateTime = DateTime.Now;
        resultListClass = await classService.ClassesList();
        if (resultListClass.Successful)
        {
            if (resultListClass.ListClass != null)
            {
                clases = resultListClass.ListClass;
                clasesPorDia = clases.GroupBy(c => c.Schedule.DayOfWeek)
                             .ToDictionary(g => g.Key, g => g.ToList());
            }
        }
        else
        {
            clases = new List<ClassDTO>();

        }

        emailUserIdentificate = await AuthService.GetEmail();
        listClassByUser = await classService.GetClassesByGymMember(emailUserIdentificate);

    }

    private IEnumerable<DayOfWeek> GetOrderedDaysOfWeek()
    {
        return new List<DayOfWeek>
        {
            DayOfWeek.Monday,
            DayOfWeek.Tuesday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday
        };
    }

    private string GetDayNameInSpanish(DayOfWeek dayOfWeek)
    {
        var cultureInfo = new CultureInfo("es-ES");
        return cultureInfo.DateTimeFormat.GetDayName(dayOfWeek).ToUpper();
    }

    private string GetDayName(DayOfWeek dayOfWeek)
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(dayOfWeek).ToUpper();
    }

    private IEnumerable<ClassDTO> GetClasesForSelectedDay()
    {
        DateTime currentDate = DateTime.Now.Date;
        DateTime selectedDate = currentDate.AddDays((int)selectedDay - (int)currentDate.DayOfWeek);

        return clases.Where(c => c.Schedule.Date == selectedDate.Date).OrderBy(x => x.Schedule);
    }

    private void SelectDay(DayOfWeek day)
    {
        selectedDay = day;
        DateTime currentDate = DateTime.Now.Date;
        DateTime selectedDate = currentDate.AddDays((int)selectedDay - (int)currentDate.DayOfWeek);
        selectedDateTime = selectedDate;
    }

    private string AddMinutes(DateTime time, int minutes)
    {
        var addHour = time.AddMinutes(minutes);
        return addHour.ToString("HH:mm");
    }

    private async Task HacerReserva(ClassDTO model)
    {
        if (model.TotalReservations < model.Capacity)
        {
            var resultado = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Reserva",
                    Text = "¿Deseas Reservar esta clase?",
                    Icon = SweetAlertIcon.Info,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Si",
                    CancelButtonText = "No"
                });

            if (resultado.IsConfirmed)
            {
                var result = await classService.MakeReservation(model.Id, emailUserIdentificate);

                if (result.Correct)
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Reserva",
                            Text = "Reserva realizada con exito",
                            Icon = SweetAlertIcon.Success
                        });



                    var sendEmailRequest = new SendEmailRequest(emailUserIdentificate, "Clase reservada en GYM PAG",
                                        "Reserva realizada con éxito, la clase con fecha: " + GetDate(model.Schedule) + "\nTipo de Clase: " + model.ClassTypeName + "\nInstructor: " + model.GymInstructorName);

                    var resultSendEmail = await AuthService.SendEmail(sendEmailRequest);

                    if (!resultSendEmail.Correct)
                    {
                        Errors = new List<string> { "Error al enviar el correo" };
                        ShowErrors = true;
                    }

                    // model.TotalReservations++;
                    // StateHasChanged();
                    await JSRuntime.InvokeVoidAsync("window.location.reload");

                }
                else
                {
                    await Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Reserva",
                            Text = result.Menssage,
                            Icon = SweetAlertIcon.Error
                        });


                }
            }
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Reserva",
                    Text = "No hay cupo disponible",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }
    }

    private async Task CancelReservation(ClassDTO model)
    {
        var resultado = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Reserva",
                Text = "¿Deseas Cancelar la reserva de esta clase?",
                Icon = SweetAlertIcon.Info,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
            });

        if (resultado.IsConfirmed)
        {
            var result = await classService.CancelReservation(model.Id, emailUserIdentificate);

            if (result.Correct)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Reserva",
                        Text = "Reserva cancelada con exito",
                        Icon = SweetAlertIcon.Success
                    });


                var sendEmailRequest = new SendEmailRequest(emailUserIdentificate, "Cancelación de clase en GYM PAG",
                                    "Cancelación realizada con éxito, la clase con fecha: " + GetDate(model.Schedule) + "\n, -Tipo de Clase: " + model.ClassTypeName + "\n, -Instructor: " + model.GymInstructorName);

                var resultSendEmail = await AuthService.SendEmail(sendEmailRequest);

                if (!resultSendEmail.Correct)
                {
                    Errors = new List<string> { "Error al enviar el correo" };
                    ShowErrors = true;
                }


                await JSRuntime.InvokeVoidAsync("window.location.reload");

            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Reserva",
                        Text = "No se pudo cancelar la reserva",
                        Icon = SweetAlertIcon.Error
                    });

                await JSRuntime.InvokeVoidAsync("window.location.reload");

            }
        }
    }

    private string GetDate(DateTime date)
    {

        return date.ToString("dd/MM/yyyy");
    }

    private bool ClassIsReservationByUser(ClassDTO clase)
    {
        if (listClassByUser == null || listClassByUser.Count == 0)
        {
            return false;
        }

        foreach (var item in listClassByUser)
        {
            if (item.Id == clase.Id)
            {

                return true;
            }
        }



        return false;
    }

}
