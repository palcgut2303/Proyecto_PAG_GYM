
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

@using GYM_DTOs;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorFronted.Services;
@using GYM_DTOs.EntityDTO
@inject SweetAlertService Swal
@inject IClassService classService;

@using System.Globalization



<style>
    
    .page-background-class {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-image: url('img/backgroungUser.jpg'); /* Ruta de la imagen de fondo */
        background-size: cover; /* Ajustar la imagen de fondo para cubrir toda la pantalla */
        background-repeat: no-repeat; /* Evitar que la imagen se repita */
        background-position: center; /* Posición de la imagen de fondo */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .overlay {
        position: fixed; /* Fijar la posición para cubrir toda la pantalla */
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8); /* Color de fondo con opacidad */
        z-index: -1; /* Colocar la imagen de fondo detrás de los demás elementos */
    }

    .calendar-container {
        margin: 20px auto;
        padding: 20px;
        max-width: 800px;
        background-color: #222;
        color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: relative;
        z-index: 3; /* Asegurar que esté por encima de la superposición */
    }

    .days-buttons {
        display: flex;
        flex-wrap: wrap; /* Permitir que los botones se ajusten en varias líneas */
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .day-button {
        background-color: #333;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        flex: 1 1 100px; /* Ajustar el tamaño de los botones */
        margin: 5px; /* Agregar margen para el espacio entre botones */
    }

        .day-button.active {
            background-color: rgb(3, 17, 41);
        }

    .classes-list {
        display: flex;
        flex-direction: column;
    }

    .class-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #444;
        margin: 5px 0;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .time {
        width: 100px;
    }

    .class-name {
        flex-grow: 1;
        padding-left: 10px;
        border-left: 5px solid rgb(3, 17, 41);
    }



</style>
<div class="page-background-class"></div>
<div class="overlay"></div>

<div class="calendar-container">
    <h2>Clases</h2>
    <div class="days-buttons">
        @foreach (var day in GetOrderedDaysOfWeek())
        {
            <button class="day-button mr-2 @(selectedDay == day ? "active" : "")" @onclick="() => SelectDay(day)">
                @GetDayName(day)
            </button>
        }
    </div>

    <div class="classes-list">
        @foreach (var clase in GetClasesForSelectedDay())
        {
            <div class="class-item">
                <div class="time">
                    @clase.Schedule.ToString("HH:mm") - @AddMinutes(clase.Schedule, 60)
                </div>
                <div class="class-name" style="border-left: 5px solid rgb(3, 17, 41 )">
                    @clase.ClassTypeName
                </div>
            </div>
        }
    </div>
</div>





@code {
    // Dictionary<DateTime, List<ClassDTO>> clasesPorDia;
    // List<DateTime>? diasMostrados;
    // DateTime diaActual = DateTime.Now.Date;
    // List<ClassDTO> clasesEnEseDia = new List<ClassDTO>();
    // ClassDTO classDTO = new ClassDTO();
    // string email = null;
    // bool reservada = false;
    // List<ClassDTO> listClassByUser = null;
    // List<GymMemberDTO> listUserByClass = null;
    // DateTime fecha = DateTime.Now;

    private ClassListResult resultListClass;
    private IEnumerable<ClassDTO> clases = new List<ClassDTO>();
    private Dictionary<DayOfWeek, List<ClassDTO>> clasesPorDia;

    private IEnumerable<DayOfWeek> GetOrderedDaysOfWeek()
    {
        return new List<DayOfWeek>
        {
            DayOfWeek.Monday,
            DayOfWeek.Tuesday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday,
            DayOfWeek.Sunday
        };
    }

    protected override async Task OnInitializedAsync()
    {
        resultListClass = await classService.ClassesList();

        if (resultListClass.Successful)
        {
            if(resultListClass.ListClass != null)
            {
                clases = resultListClass.ListClass;
            }
        }

        clasesPorDia = clases.GroupBy(c => c.Schedule.DayOfWeek)
                              .ToDictionary(g => g.Key, g => g.ToList());

    }

    private string GetDayName(DayOfWeek dayOfWeek)
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(dayOfWeek).ToUpper();
    }

    private DayOfWeek selectedDay = DateTime.Now.DayOfWeek;

    private IEnumerable<ClassDTO> GetClasesForSelectedDay()
    {
        DateTime currentDate = DateTime.Now.Date;
        int numero = (int)selectedDay;
        int numeroActual = (int)currentDate.DayOfWeek;
        DateTime selectedDate = currentDate.AddDays(numero - numeroActual);
        return clases.Where(c => c.Schedule.Date == selectedDate.Date);
    }

    private void SelectDay(DayOfWeek day)
    {
        selectedDay = day;
    }

    private string AddMinutes(DateTime time, int minutes)
    {
        var addHour = time.AddMinutes(minutes);
        return addHour.ToString("HH:mm");
    }
   
}
