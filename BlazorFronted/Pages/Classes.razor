@page "/clases"

@using GYM_DTOs;
@using CurrieTechnologies.Razor.SweetAlert2;
@using BlazorFronted.Services;
@using GYM_DTOs.EntityDTO
@inject SweetAlertService Swal
@inject IClassService classService;


<div class="container mt-5">
    <h3>Clases</h3>


    <EditForm Model="classDTO">
       <DataAnnotationsValidator />
       <div class="mb-3">
        <label class="form-label">Calendario</label>
            <InputDate class="form-control" @bind-Value="classDTO.Schedule"></InputDate>
            <ValidationMessage For="@(() => classDTO.Schedule)"></ValidationMessage>
            <button @onclick="mostrarDia">Obtener Clases</button>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>
                        Nombre
                    </th>
                    <th>
                        Horario
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (clasesPorDia is not null)
                {
                    @if (clasesEnEseDia is not null)
                    {
                        @foreach (var clase in clasesEnEseDia)
                        {
                            if (clase.Schedule.Date == classDTO.Schedule.Date)
                            {
                                <tr>
                                    <td>@clase.Name</td>
                                    <td>@clase.Schedule</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td></td>
                                    <td></td>
                                </tr>
                            }

                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="2" align="center">
                                <img style="width:50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" align="center">
                            <img style="width:50px" src="https://media.tenor.com/On7kvXhzml4AAAAj/loading-gif.gif" />
                        </td>
                    </tr>
                }
            </tbody>

        </table>
        
    </EditForm>
    

    

</div>





@code {

    Dictionary<DateTime, List<ClassDTO>> clasesPorDia;
    List<DateTime>? diasMostrados;
    DateTime diaActual = DateTime.Now.Date;
    List<ClassDTO> clasesEnEseDia  = new List<ClassDTO>();

    ClassDTO classDTO = new ClassDTO();

   

    protected override async Task OnInitializedAsync()
    {
        clasesPorDia = await classService.ObtenerClasesPorDiaDeLaSemana();
        diasMostrados = clasesPorDia.Keys.ToList();
        classDTO.Schedule = DateTime.Now.Date;

        foreach (var item in clasesPorDia)
        {
            if (item.Key.Date == classDTO.Schedule.Date)
            {
                clasesEnEseDia = item.Value;
            }
        }
    }

    void IrAlDiaAnterior()
    {
        diaActual = diaActual.AddDays(-1);

        foreach (var item in clasesPorDia)
        {
            if (item.Key.Date == classDTO.Schedule.Date)
            {
                clasesEnEseDia = item.Value;
            }
        }

    }

    void mostrarDia()
    {
       

        foreach (var item in clasesPorDia)
        {
            if (item.Key.Date == classDTO.Schedule.Date)
            {
                clasesEnEseDia = item.Value;
            }
        }
    }
}
